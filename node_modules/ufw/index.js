const execSync = require('child_process').execSync;

const ipv4Regex = /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/;
const ipv6Regex = /^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?$/;

function isV4(ip) {
  return ipv4Regex.test(ip);
}

function isV6(ip) {
  return ipv6Regex.test(ip);
}

function ufw(args) {
  execSync('ufw ' + args);
}

function buildRule(rule) {
  let ruleTextParts = [];
  if(rule.proto !== undefined) {
    if(rule.proto === 'tcp') {
      ruleTextParts.push('proto tcp');
    } else if(rule.proto === 'udp') {
      ruleTextParts.push('proto udp');
    } else if(rule.proto === 'any') {
      ruleTextParts.push('proto any');
    }
  } else {
    ruleTextParts.push('proto any');
  }

  if(rule.from !== undefined && ((isV4(rule.from) || isV6(rule.from)) || rule.from === 'any')) {
    ruleTextParts.push('from ' + rule.from);
  } else {
    ruleTextParts.push('from any');
  }

  if(rule.to !== undefined && ((isV4(rule.to) || isV6(rule.to)) || rule.to === 'any')) {
    ruleTextParts.push('to ' + rule.to);
  } else {
    ruleTextParts.push('to any');
  }

  if(rule.port !== undefined && typeof rule.port === 'number' && rule.port > 0 && rule.port < 65536) {
    ruleTextParts.push('port ' + rule.port);
  }

  return ruleTextParts.join(' ');
}

exports.allow = function(rule) {
  let ruleStr = 'allow ' + buildRule(rule);
  ufw(ruleStr);
}

exports.deny = function(rule) {
  let ruleStr = 'deny ' + buildRule(rule);
  ufw(ruleStr);
}

exports.deleteAllow = function(rule) {
  let ruleStr = 'delete allow ' + buildRule(rule);
  ufw(ruleStr);
}

exports.deleteDeny = function(rule) {
  let ruleStr = 'delete allow ' + buildRule(rule);
  ufw(ruleStr);
}
